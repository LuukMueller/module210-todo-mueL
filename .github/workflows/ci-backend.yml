name: Build and save my Docker image to a registry

on:
  push:
    branches:
      - main  # Trigger, wenn auf den 'main' Branch gepusht wird

env:
  REG_NAME: "exo.container-registry.com"  # Name des Registrys (ohne 'azurecr.io')
  IMAGE_NAME: "todo-app"  # Der Name des Docker-Images
  REGISTRY: "exo.container-registry.com/c213-emf"  # Die vollst채ndige Registry-URL
  TAG_NAME: "ML-latest"  # Tag f체r das Image (z.B. 'latest')

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # Build auf einer Ubuntu-VM

    steps:
      # Schritt 1: Repository auschecken
      - name: Checkout repository
        uses: actions/checkout@v3

      # Schritt 2: Docker-Login bei der privaten Registry
      - name: Log in to Docker registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # GitHub Secret f체r Docker-Benutzernamen
          password: ${{ secrets.DOCKER_TOKEN }}  # GitHub Secret f체r Docker-Passwort/Token
          registry: ${{ env.REG_NAME }}  # Die verwendete Registry (z.B. exo.container-registry.com)

                # Schritt 4: In das Verzeichnis wechseln (src/backend)
      - name: Change directory to src/backend
        run: |
          cd src/backend

      # Schritt 3: Docker-Image aus der Registry ziehen
      - name: Pull Docker image from registry
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_NAME }} || echo "Image not found, proceeding with build."



      # Schritt 5: Docker-Image bauen
      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_NAME }} .

      # Schritt 6: Docker-Image in die Registry pushen
      - name: Push Docker image to registry
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_NAME }}
